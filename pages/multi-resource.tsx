import { ConnectButton, useAddRecentTransaction } from "@rainbow-me/rainbowkit"
import type { NextPage } from "next"
import Head from "next/head"
import styles from "../styles/Home.module.css"
import { useContract, useSigner } from "wagmi"
import NftList from "../components/nft-list"
import React, { useEffect, useState } from "react"
import Image from "next/image"
import Link from "next/link"
import abis from "../abis/abis"
import {
  registryContractDetails,
  RMRKMultiResourceFactoryContractAddress,
  tokenContractDetails,
} from "../constants"
import {
  deployContract,
  getCollections,
  getOwnedNfts,
  mintNft,
} from "../lib/transactions"

const MultiResource: NextPage = () => {
  const { data: signer } = useSigner()
  const addRecentTransaction = useAddRecentTransaction()
  const [currentRmrkDeployment, setCurrentRmrkDeployment] = useState<string>("")
  const [rmrkCollections, setRmrkCollections] = useState<string[]>([])
  const [loading, setLoading] = useState<boolean>(true)
  const [nameInput, setNameInput] = useState<string>("Test Collection")
  const [symbolInput, setSymbolInput] = useState<string>("TEST")
  const [collectionMetadataInput, setCollectionMetadataInput] =
    useState<string>("")
  const [maxSupplyInput, setSupplyInput] = useState<number>(10000)
  const [priceInput, setPriceInput] = useState<number>(0)
  const [ownedNfts, setOwnedNfts] = useState<
    { tokenId: number; owner: string; tokenUri: string }[]
  >([])
  const factoryContract = useContract({
    addressOrName: RMRKMultiResourceFactoryContractAddress as string,
    contractInterface: abis.multiResourceFactoryAbi,
    signerOrProvider: signer,
  })

  const tokenContract = useContract({
    ...tokenContractDetails,
    signerOrProvider: signer,
  })

  const registryContract = useContract({
    ...registryContractDetails,
    signerOrProvider: signer,
  })

  const onSubmit = () => {
    deployContract({
      signer,
      registryContract,
      tokenContract,
      factoryContract,
      addRecentTransaction,
      data: {
        nameInput,
        symbolInput,
        maxSupplyInput,
        priceInput,
        collectionMetadataInput,
      },
    }).then((receipt) => setCurrentRmrkDeployment(receipt.events[1].address))
  }

  const onMint = () => {
    mintNft({
      signer,
      contractAddress: currentRmrkDeployment,
      addRecentTransaction,
    }).then(() => fetchData())
  }

  function handleNameInput(e: React.ChangeEvent<HTMLInputElement>) {
    setNameInput(e.target.value)
  }

  function handleSymbolInput(e: React.ChangeEvent<HTMLInputElement>) {
    setSymbolInput(e.target.value)
  }

  function handleMetadataInput(e: React.ChangeEvent<HTMLInputElement>) {
    setCollectionMetadataInput(e.target.value)
  }

  function handleMaxSupplyInput(e: React.ChangeEvent<HTMLInputElement>) {
    setSupplyInput(Number(e.target.value))
  }

  function handlePriceInput(e: React.ChangeEvent<HTMLInputElement>) {
    setPriceInput(Number(e.target.value))
  }

  function handleContractSelection(e: React.ChangeEvent<HTMLInputElement>) {
    setCurrentRmrkDeployment(rmrkCollections[Number(e.target.value)])
  }

  const fetchData = () => {
    getCollections({ signer, factoryContract }).then((collections) => {
      setLoading(false)
      setRmrkCollections(collections)
    })
    if (currentRmrkDeployment.length > 0)
      getOwnedNfts({ signer, contractAddress: currentRmrkDeployment }).then(
        (nfts) => {
          setOwnedNfts(nfts)
        }
      )
  }

  useEffect(() => {
    console.log("Loading chain data")
    setLoading(true)
    fetchData()
  }, [signer, currentRmrkDeployment])

  return (
    <div className={styles.container}>
      <Head>
        <title>RMRK Multi-resource App</title>
        <meta
          name="description"
          content="Generated by @rainbow-me/create-rainbowkit"
        />
        {/*<link rel="icon" href="/favicon.ico" />*/}
      </Head>

      <main className={styles.main}>
        <ConnectButton />

        <h1 className={styles.title}>Multi-resource Demo</h1>

        <p className="mb-4">
          Create a new NFT collection contract so you can add your own set of
          resources to it:
        </p>

        <div className="form-control w-full max-w-xs mb-2">
          <label className="label">
            <span className="label-text">Collection Name</span>
          </label>
          <input
            inputMode="text"
            placeholder="Name"
            className="input input-bordered w-full max-w-xs my-0.5"
            value={nameInput}
            onChange={handleNameInput}
          ></input>
          <label className="label">
            <span className="label-text">Collection Symbol</span>
          </label>
          <input
            inputMode="text"
            placeholder="Symbol"
            className="input input-bordered w-full max-w-xs my-0.5"
            value={symbolInput}
            onChange={handleSymbolInput}
          ></input>
          <label className="label">
            <span className="label-text">Max NFT Supply</span>
          </label>
          <input
            inputMode="numeric"
            placeholder="Max supply"
            className="input input-bordered w-full max-w-xs my-0.5"
            value={maxSupplyInput}
            onChange={handleMaxSupplyInput}
          ></input>
          <label className="label">
            <span className="label-text">Price per NFT mint (in wei)</span>
          </label>
          <input
            inputMode="numeric"
            placeholder="Price"
            className="input input-bordered w-full max-w-xs my-0.5"
            value={priceInput}
            onChange={handlePriceInput}
          ></input>
          <label className="label">
            <span className="label-text">Collection Metadata URI</span>
          </label>
          <input
            inputMode="text"
            placeholder="Collection metadata URI"
            className="input input-bordered w-full max-w-xs my-0.5"
            value={collectionMetadataInput}
            onChange={handleMetadataInput}
          ></input>
        </div>

        <button onClick={onSubmit} className="btn btn-wide btn-primary">
          Deploy NFT contract
        </button>

        <p className="mt-5">
          Your RMRK NFT Contract will be deployed on the Moonbase Alpha testnet.{" "}
        </p>

        {rmrkCollections.length > 0 && (
          <>
            <h1 className="text-2xl mt-8 mb-5">Your RMRK NFT Collections:</h1>
            <p className="mb-2">Select which one do you want to use:</p>
            {rmrkCollections?.map((contract, index) => {
              return (
                <div
                  key={index}
                  className="card-compact hover:bg-accent-content/5 p-2 rounded-md items-center flex"
                >
                  <input
                    type="radio"
                    name="radio-contract"
                    className="radio checked:bg-red-500"
                    value={index}
                    onChange={handleContractSelection}
                    checked={contract === currentRmrkDeployment}
                  />

                  <Link href={"/contract/" + contract}>
                    <code className="mx-2 hover:underline">{contract}</code>
                  </Link>
                  <a href={"https://moonbase.moonscan.io/address/" + contract}>
                    <Image
                      alt="logo"
                      src="/moonbeam.svg"
                      width="25"
                      height="25"
                    />
                  </a>
                </div>
              )
            })}
          </>
        )}

        {currentRmrkDeployment.length > 0 && (
          <>
            <p className="mb-4 mt-5">
              Mint an NFT to be able to attach multiple resources to it:
            </p>
            <button onClick={onMint} className="btn btn-wide btn-primary">
              Mint NFT
            </button>
            <p className="mt-5">
              It might take a few minutes to show your NFTs when just minted.
            </p>
            <p className="mb-5">
              Click on the NFT card to open resource management page.
            </p>
            <NftList
              nfts={ownedNfts}
              tokenContract={currentRmrkDeployment}
              tokenType={"contract"}
            />
          </>
        )}
        {loading && <progress className="progress mt-2 w-72"></progress>}
      </main>

      <footer className={styles.footer}></footer>
    </div>
  )
}

export default MultiResource
